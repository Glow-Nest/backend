// <auto-generated />
using System;
using System.Collections.Generic;
using DomainModelPersistence.EfcConfigs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DomainModelPersistence.Migrations
{
    [DbContext(typeof(DomainModelContext))]
    [Migration("20250514143321_createProductReview")]
    partial class createProductReview
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.Client.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Domain.Aggregates.Client.Client.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "Domain.Aggregates.Client.Client.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "Domain.Aggregates.Client.Client.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Domain.Aggregates.Client.Client.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");
                        });

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Aggregates.Order.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("PriceWhenOrdering")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id", "ProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Domain.Aggregates.Order.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PickupDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.Aggregates.Product.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Domain.Aggregates.Product.Product.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ImageUrl", "Domain.Aggregates.Product.Product.ImageUrl#ImageUrl", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ImageUrl");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("InventoryCount", "Domain.Aggregates.Product.Product.InventoryCount#InventoryCount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("InventoryCount");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Domain.Aggregates.Product.Product.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("Price");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProductName", "Domain.Aggregates.Product.Product.ProductName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");
                        });

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Domain.Aggregates.ProductReview.ProductReview", b =>
                {
                    b.Property<Guid>("ProductReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Rating", "Domain.Aggregates.ProductReview.ProductReview.Rating#Rating", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Rating");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ReviewMessage", "Domain.Aggregates.ProductReview.ProductReview.ReviewMessage#ReviewMessage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ReviewMessage");
                        });

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("Domain.Aggregates.SalonOwner.SalonOwner", b =>
                {
                    b.Property<Guid>("SalonOwnerId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Domain.Aggregates.SalonOwner.SalonOwner.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "Domain.Aggregates.SalonOwner.SalonOwner.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");
                        });

                    b.HasKey("SalonOwnerId");

                    b.ToTable("SalonOwner");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AppointmentDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("BookedByClient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("AppointmentNote", "Domain.Aggregates.Schedule.Entities.Appointment.AppointmentNote#AppointmentNote", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Note");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeSlot", "Domain.Aggregates.Schedule.Entities.Appointment.TimeSlot#TimeSlot", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndTime");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartTime");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BookedByClient");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.BlockedTime", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScheduledDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Reason", "Domain.Aggregates.Schedule.Entities.BlockedTime.Reason#BlockReason", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Reason");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeSlot", "Domain.Aggregates.Schedule.Entities.BlockedTime.TimeSlot#TimeSlot", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndTime");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartTime");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("BlockedTime");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScheduleDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceCategory.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("CategoryName", "Domain.Aggregates.ServiceCategory.Category.CategoryName#CategoryName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("CategoryName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Domain.Aggregates.ServiceCategory.Category.Description#CategoryDescription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Description");
                        });

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceCategory.Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Domain.Aggregates.ServiceCategory.Entities.Service.Name#ServiceName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Domain.Aggregates.ServiceCategory.Entities.Service.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("Price");
                        });

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceReview.ServiceReview", b =>
                {
                    b.Property<Guid>("ServiceReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Rating", "Domain.Aggregates.ServiceReview.ServiceReview.Rating#Rating", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Rating");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ReviewMessage", "Domain.Aggregates.ServiceReview.ServiceReview.ReviewMessage#ReviewMessage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ReviewMessage");
                        });

                    b.HasKey("ServiceReviewId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceReview");
                });

            modelBuilder.Entity("Domain.Aggregates.Client.Client", b =>
                {
                    b.OwnsOne("Domain.Aggregates.Client.Entities.OtpSession", "OtpSession", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CreatedAt");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean")
                                .HasColumnName("IsUsed");

                            b1.Property<string>("OtpCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("OtpCode");

                            b1.Property<int>("Purpose")
                                .HasColumnType("integer")
                                .HasColumnName("Purpose");

                            b1.HasKey("ClientId", "Email");

                            b1.HasIndex("ClientId")
                                .IsUnique();

                            b1.ToTable("OtpSessions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("OtpSession");
                });

            modelBuilder.Entity("Domain.Aggregates.Order.Entities.OrderItem", b =>
                {
                    b.HasOne("Domain.Aggregates.Order.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Aggregates.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Order.Order", b =>
                {
                    b.HasOne("Domain.Aggregates.Client.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.ProductReview.ProductReview", b =>
                {
                    b.HasOne("Domain.Aggregates.Client.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Aggregates.Client.Client", null)
                        .WithMany()
                        .HasForeignKey("BookedByClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Schedule.Schedule", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Domain.Aggregates.Schedule.Values.AppointmentValues.AppointmentServiceReference", "Services", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.HasKey("AppointmentId", "ServiceId");

                            b1.HasIndex("ServiceId");

                            b1.ToTable("AppointmentServices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasOne("Domain.Aggregates.ServiceCategory.Entities.Service", null)
                                .WithMany()
                                .HasForeignKey("ServiceId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();
                        });

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.BlockedTime", b =>
                {
                    b.HasOne("Domain.Aggregates.Schedule.Schedule", null)
                        .WithMany("BlockedTimeSlots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceCategory.Category", b =>
                {
                    b.OwnsMany("Domain.Aggregates.ServiceCategory.Values.MediaUrl", "MediaUrls", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Url");

                            b1.HasKey("Id");

                            b1.HasIndex("CategoryId");

                            b1.ToTable("MediaUrls", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("MediaUrls");
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceCategory.Entities.Service", b =>
                {
                    b.HasOne("Domain.Aggregates.ServiceCategory.Category", null)
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceReview.ServiceReview", b =>
                {
                    b.HasOne("Domain.Aggregates.Client.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.ServiceCategory.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Schedule", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BlockedTimeSlots");
                });

            modelBuilder.Entity("Domain.Aggregates.ServiceCategory.Category", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
