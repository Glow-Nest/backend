// <auto-generated />
using System;
using System.Collections.Generic;
using DomainModelPersistence.EfcConfigs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DomainModelPersistence.Migrations
{
    [DbContext(typeof(DomainModelContext))]
    [Migration("20250417205248_AddScheduleTable")]
    partial class AddScheduleTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.Appointment.Values.AppointmentServiceReference", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServiceReference");
                });

            modelBuilder.Entity("Domain.Aggregates.Client.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Domain.Aggregates.Client.Client.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "Domain.Aggregates.Client.Client.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "Domain.Aggregates.Client.Client.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Domain.Aggregates.Client.Client.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");
                        });

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Aggregates.SalonOwner.SalonOwner", b =>
                {
                    b.Property<Guid>("SalonOwnerId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Domain.Aggregates.SalonOwner.SalonOwner.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "Domain.Aggregates.SalonOwner.SalonOwner.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");
                        });

                    b.HasKey("SalonOwnerId");

                    b.ToTable("SalonOwner");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AppointmentDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("BookedByClient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("AppointmentNote", "Domain.Aggregates.Schedule.Entities.Appointment.AppointmentNote#AppointmentNote", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Note");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeSlot", "Domain.Aggregates.Schedule.Entities.Appointment.TimeSlot#TimeSlot", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndTime");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartTime");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BookedByClient");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScheduleDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Domain.Aggregates.Service.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Aggregates.Appointment.Values.AppointmentServiceReference", b =>
                {
                    b.HasOne("Domain.Aggregates.Schedule.Entities.Appointment", null)
                        .WithMany("Services")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Service.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Client.Client", b =>
                {
                    b.OwnsOne("Domain.Aggregates.Client.Entities.OtpSession", "OtpSession", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CreatedAt");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean")
                                .HasColumnName("IsUsed");

                            b1.Property<string>("OtpCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("OtpCode");

                            b1.Property<int>("Purpose")
                                .HasColumnType("integer")
                                .HasColumnName("Purpose");

                            b1.HasKey("ClientId", "Email");

                            b1.HasIndex("ClientId")
                                .IsUnique();

                            b1.ToTable("OtpSessions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("OtpSession");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Aggregates.Client.Client", null)
                        .WithMany()
                        .HasForeignKey("BookedByClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Schedule.Schedule", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Schedule", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Schedule.Values.TimeSlot", "BlockedTimeSlots", b1 =>
                        {
                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndTime");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartTime");

                            b1.HasKey("ScheduleId", "Id");

                            b1.ToTable("TimeSlot");

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.Navigation("BlockedTimeSlots");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Entities.Appointment", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Aggregates.Schedule.Schedule", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
